#define the stages
stages:
  - build
  - test

#define global variables
variables:
  TAG_LATEST: $DOCKERHUB/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $DOCKERHUB/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  #CI_* variables are predefined Gitlab variables

#define job
build_job:
  image: docker:18.09 #the docker image to use
  stage: build #the stage the job belongs to
  tags: #tag of the runners
    - runner1
  services: #which service to install on top of the container
    - docker:18.09-dind
  #docker-in-docker is used to use docker command inside docker container
  script:
    - echo $TAG_COMMIT $TAG_LATEST #view what these global variables contain
    - docker build -t $TAG_COMMIT -t $TAG_LATEST . #build the image with 2 different names
    - docker login -u $DOCKERHUB -p $DCKPASSWD #login to your dockerhub
    - docker push $TAG_COMMIT #push the image with name1
    - docker push $TAG_LATEST #push the image with name2
    - docker image save $TAG_COMMIT | gzip > nginx.tar.gz
    - ls -lh
  artifacts:
    paths:
      - nginx.tar.gz
    expire_in: 1 day

test_job:
  image: docker:18.09
  stage: test
  tags:
    - runner1
  services:
    - docker:18.09-dind
  script:
    - docker pull $TAG_COMMIT
    - docker run -d -p 8001:8001 --name nginx $TAG_COMMIT
    - sleep 5
    - state=$(docker container ls -a --format "{{json .Status}}" | tr -d '"' | awk '{print $1}')
    - echo $state
    - |
      if [[ $state == "Exited" ]]; then 
        docker logs nginx
        docker logs nginx > container.log
        exit 1 
      fi
  artifacts:
    paths:
      - container.log
    expire_in: 1 day
